(use-package telega
  :ensure t
  :bind
  ("C-c t" . telega)
  :config
  (setq telega-server-libs-prefix "/usr/local/")
  (telega-mode-line-mode 1)
  (telega-notifications-mode -1))

(defun my/match-at-point-msg ()
  (interactive)
  (let ((regex (read-string "Type: ")))
    (when (telega-msg-match-p (telega-msg-at) `(contains ,regex))
      (message "yes!"))))
(defun search-back ()
  (interactive)
  (let ((regex (read-string "Type: ")))
    (setq telega-pre-regex regex)
    (setq mycount 1)
    (while (< mycount 100)
      (telega-button-backward 1)
      (when (telega-msg-match-p (telega-msg-at) `(contains ,regex))
        (message "yes!")
        (setq mycount 99))
      (setq mycount (1+ mycount)))))
(defun continue-search-back ()
  (interactive)
  (setq mycount 1)
  (while (< mycount 100)
    (telega-button-backward 1 nil :no-error)
    (when (telega-msg-match-p (telega-msg-at) `(contains ,telega-pre-regex))
      (message "yes!")
      (setq mycount 99))
    (setq mycount (1+ mycount))))

(defun my/search-back ()
  (interactive)
  (let ((regex (read-string "Type: ")))
    (setq telega-pre-regex regex)
    (setq mycount 1)
    (while (< mycount 100)
      (telega-button-backward 1 nil :no-error)
      (when (telega-msg-match-p (telega-msg-at) `(contains ,regex))
        (message "yes!")
        (setq mycount 99))
      (setq mycount (1+ mycount)))))

(provide 'init-telega)
